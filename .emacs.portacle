;; init
(package-initialize)
(require 'package)
(setq warning-minimum-level :emergency)
(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq display-time-format (format-time-string "%I:%M %p"))
(setq split-height-threshold nil)
(setq default-directory (expand-file-name (portacle-path "../../projects/")))
(delete-selection-mode 1)
(display-time-mode 1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(show-paren-mode 1)
(global-visual-line-mode t)
(blink-cursor-mode 0)

;; reroute to emacs-china
(setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
			 ("melpa" . "http://elpa.emacs-china.org/melpa/")
			 ("org" . "http://elpa.emacs-china.org/org/")))

;; keys
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C--") 'undo)
(global-set-key (kbd "C-=") 'redo)
(global-set-key (kbd "C-f") 'set-mark-command)
(global-set-key (kbd "C-w") 'isearch-backward)

;; config
(use-package aggressive-indent
             :ensure t
             :config 
             (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
             (add-hook 'lisp-mode-hook #'aggressive-indent-mode))

(use-package all-the-icons
             :ensure t)

(use-package anzu
             :ensure t
             :bind (("C-d" . anzu-query-replace))
             :config
             (global-anzu-mode +1))

(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))

(use-package auto-package-update
  :ensure t
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "00:00"))

(use-package beacon
             :ensure t
             :config
             (beacon-mode 1)
             (setq beacon-color "#72dfd9"))

(use-package dockerfile-mode
             :ensure t
             :config
             (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

(use-package dracula-theme
             :ensure t
             :config
             (load-theme 'dracula t t)
             (enable-theme 'dracula))

(use-package elfeed
             :ensure t
             :bind (("C-x f" . elfeed))
             :config
             (setq elfeed-feeds '("http://xkcd.com/rss.xml")))

(use-package elpy
  :ensure t
  :config
  (elpy-enable))

(use-package expand-region
  :ensure t
  :bind (("C-a" . er/expand-region)))

(use-package fancy-battery
  :ensure t
  :config
  (add-hook 'after-init-hook #'fancy-battery-mode))

(use-package flx-ido
             :ensure t
             :config
             (ido-everywhere 1)
             (flx-ido-mode 1)
             (setq ido-enable-flex-matching t)
             (setq ido-use-faces nil))

(use-package ghub
             :ensure t)

(use-package highlight-indent-guides
             :ensure t
             :config
             (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
             (setq highlight-indent-guides-method 'character))

(use-package hlinum
  :ensure t
  :config
  (hlinum-activate))

(use-package icomplete
  :ensure t
  :config
  (icomplete-mode 1))

(use-package ido
  :ensure t
  :config
  (ido-mode t))

(use-package ido-grid-mode
  :ensure t
  :config
  (ido-grid-mode 1)
  (setq ido-grid-mode-prefix-scrolls t))

(use-package linum
  :ensure t
  :config
  (setq linum-format
	(lambda (line)
	  (concat
	   (propertize (number-to-string (1- line)) 'face 'linum)
	   " ")))
  (add-hook 'prog-mode-hook 'linum-mode))

(use-package magit
  :ensure t
  :bind (("C-x m" . magit-status)))

(use-package markdown
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package neotree
  :ensure t
  :bind (("C-x SPC" . neotree-toggle)
	 ("C-c 1" . neotree-dir))
  :config
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-window-fixed-size nil)
  (setq neo-window-width 35)) 

(use-package nyan-mode
  :ensure t
  :config
  (nyan-mode 1)
  (nyan-start-animation)
  (setq nyan-wavy-trail t)
  (setq nyan-cat-face-number 3)
  (setq nyan-bar-length 24))

(use-package org
             :ensure t
             :config
             (setq org-startup-indented t)
             (setq truncate-lines t))

(use-package page-break-lines
             :ensure t
             :config
             (turn-on-page-break-lines-mode))

(use-package pangu-spacing
             :ensure t
             :config
             (global-pangu-spacing-mode 1)
             (setq pangu-spacing-real-insert-separtor t))

(use-package paredit
             :ensure t
             :config
             (define-portacle-key "C-<right>" 'paredit-forward)
             (define-portacle-key "C-<left>" 'paredit-backward)
             (define-portacle-key "C-'" 'paredit-meta-doublequote)
             (define-portacle-key "C-c ]" 'paredit-forward-slurp-sexp)
             (define-portacle-key "C-c [" 'paredit-backward-slurp-sexp)
             (define-portacle-key "C-c C-]" 'paredit-forward-barf-sexp)
             (define-portacle-key "C-c C-[" 'paredit-backward-barf-sexp))

(use-package perspective
             :ensure t
             :config
             (persp-mode))

(use-package rainbow-delimiters
             :ensure t
             :config
             (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
             (add-hook 'comint-mode-hook 'rainbow-delimiters-mode))

(use-package restclient
             :ensure t
             :bind (("C-x r" . restclient-http-send-current)))

(use-package shell-pop
  :ensure t
  :bind (("C-t" . shell-pop)
	 :map comint-mode-map
	 ("<up>" . comint-previous-input)
	 ("<down>" . comint-next-input)))

(use-package smartparens
             :ensure t
             :config
             (smartparens-global-mode t)
             (smartparens-strict-mode t)
             (sp-pair "<" ">")
             (sp-pair "（" "）")
             (sp-pair "'" nil :actions :rem))

(use-package smex
             :ensure t
             :bind (("M-x" . smex)
                    ("M-X" . smex-major-mode-commands)
                    ("C-c M-x" . execute-extended-command))
             :config
             (smex-initialize))

(use-package spaceline
             :ensure t
             :config
             (spaceline-spacemacs-theme)
             (spaceline-toggle-line-column-on))

(use-package spaceline-all-the-icons 
             :ensure t
             :config
             (spaceline-all-the-icons-theme))

(use-package ssh
  :ensure t
  :config
  (add-hook 'ssh-mode-hook
	    (lambda ()
	      (setq ssh-directory-tracking-mode t)
	      (shell-dirtrack-mode t)
	      (setq dirtrackp nil))))

(use-package symon
  :ensure t
  :config
  (setq symon-delay 1)
  (setq symon-monitors '(symon-darwin-memory-monitor
			 symon-darwin-cpu-monitor 
			 symon-darwin-network-rx-monitor
			 symon-darwin-network-tx-monitor))
  (symon-mode))

(use-package tramp
  :ensure t
  :config
  (setq tramp-default-method "ssh"))

(use-package undo-tree
  :ensure t
  :config
  (setq global-undo-tree-mode t)
  (defalias 'undo 'undo-tree-undo)
  (defalias 'redo 'undo-tree-redo))

(use-package winum
  :ensure t
  :config 
  (setq winum-auto-setup-mode-line nil)
  (winum-mode))

(use-package zoom-window
  :ensure t
  :bind (("C-z" . zoom-window-zoom))
  :config
  (setq zoom-window-mode-line-color nil))

(use-package zone
             :ensure t
             :config 
             (setq zone-programs [zone-nyan])
             (setq zone-nyan-hide-progress t)
             (zone-when-idle 1800))
